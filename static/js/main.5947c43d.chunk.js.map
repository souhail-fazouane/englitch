{"version":3,"sources":["ressources/ENGLITCH.png","components/Cell.jsx","random.js","components/Board.jsx","components/Game.jsx","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cell","valeur","isDisplayed","onSelected","valeur_affiche","useSpring","opacity","transform","config","mass","tension","friction","className","onClick","div","style","interpolate","o","backgroundColor","borderRadius","display","margin","t","src","logo","alt","randomNumber","start","stop","rangeLength","Math","floor","random","randomSequence","sequence","result","Array","from","i","length","j","tmp","synonymsDictionary","data","split","range","keys","map","v","generateRandomWords","randomSynonyms","slice","LinesCount","randomWords","flatMap","pair","areSynonyms","word1","word2","includes","Board","useState","setRandomWords","couplechoisi","setCouplechoisi","completedWords","setCompletedWords","score","setScore","clicks","setClicks","useEffect","setTimeout","choisirMot","mot","nouveauCouplechoisi","restartGame","useMemoryBoardGame","Result","maxHeight","padding","justifyContent","alignItems","alignContent","height","width","line","key","String","column","index","text","some","couple","Game","Component","Navbar","href","id","App","position","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5947c43d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ENGLITCH.e54181f1.png\";","import React, { useState } from \"react\";\nimport logo from \"../ressources/ENGLITCH.png\";\nimport { useSpring, animated as a } from \"react-spring\";\n\nexport default function Cell({ valeur, isDisplayed, onSelected }) {\n  //const valeur_affiche = isDisplayed ? valeur : null;\n  const valeur_affiche = isDisplayed ? valeur : null;\n  const { transform, opacity } = useSpring({\n    opacity: !isDisplayed ? 1 : 0,\n    transform: `perspective(600px) rotateX(${!isDisplayed ? 180 : 0}deg)`,\n    config: { mass: 5, tension: 500, friction: 80 }\n  });\n  return (\n    <div className=\"memory-card\" onClick={onSelected}>\n      <a.div\n        className=\"back-face\"\n        style={{ opacity: opacity.interpolate(o => 1 - o), transform ,  backgroundColor: 'white',borderRadius: '15px'}}\n      >\n        <div className=\"card-value\" style={{display: 'grid'}}><div style={{ margin: 'auto'}}>{valeur_affiche}</div>\n        </div>\n      </a.div>\n      <a.div\n        className=\"front-face\"\n        style={{\n          opacity,\n          transform: transform.interpolate(t => `${t} rotateX(180deg)`),\n          borderRadius: '25px'\n        }}\n      >\n        <img className=\"front-face\" style={{borderRadius: '15px'}} src={logo} alt=\"logoEnglitch\" />\n      </a.div>\n    </div>\n  );\n}\n","export function randomNumber(start, stop) {\n  const rangeLength = stop - start;\n  return Math.floor(Math.random() * rangeLength) + start;\n}\n\nexport function randomSequence(sequence) {\n  const result = Array.from(sequence);\n  for (let i = 0; i < sequence.length - 1; i++) {\n    const j = randomNumber(i, sequence.length);\n    const tmp = result[i];\n    result[i] = result[j];\n    result[j] = tmp;\n  }\n  return result;\n}\n\nexport function randomChoice(collection) {\n  const index = randomNumber(0, collection.length);\n  return collection[index];\n}\n","import React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport { randomSequence } from \"../random\";\nimport data from \"../ressources/myData.json\"; \nimport \"../App.css\";\n/////////////////// /\n//Score\n/////////////// \n/*const Result = () => {\n  return <div>{score}</div>;\n};*/\n/////////////////////\n//Board\n////////////////////\nconst synonymsDictionary = data.split(\" \");\n\nfunction range(start, stop) {\n  // [start, start + 1, ..., stop - 1]\n  return Array.from(Array(stop - start).keys()).map(v => start + v);\n}\n\nconst LinesCount = 3;\nconst ColumnsCount = 4;\nconst SynonymesCount = (LinesCount * ColumnsCount) / 2;\n\nfunction generateRandomWords() {\n  const randomSynonyms = randomSequence(synonymsDictionary).slice(\n    0,\n    SynonymesCount\n  );\n  const words = randomSynonyms.flatMap(pair => pair.split(\"-\"));\n  const areSynonyms = (word1, word2) => {\n    return (\n      randomSynonyms.includes(`${word1}-${word2}`) ||\n      randomSynonyms.includes(`${word2}-${word1}`)\n    );\n  };\n  const randomWords = randomSequence(words);\n  return { randomWords, areSynonyms };\n}\n\nfunction useMemoryBoardGame() {\n  // Gamestate\n  const [{ randomWords, areSynonyms }, setRandomWords] = useState(\n    generateRandomWords\n  );\n  const [couplechoisi, setCouplechoisi] = useState([]);\n  const [completedWords, setCompletedWords] = useState([]);\n  const [score, setScore] = useState(0);\n  const [clicks, setClicks] = useState(0);\n\n  // Gameplay\n  function choisirMot(mot) {\n    if (couplechoisi.length === 2) {\n      return;\n    }\n    setClicks(clicks + 1);\n    // mise à jour score / couple choisi\n    const nouveauCouplechoisi = [...couplechoisi, mot];\n    if (nouveauCouplechoisi.length === 2) {\n      const [word1, word2] = nouveauCouplechoisi;\n      if (areSynonyms(word1, word2)) {\n        // mise à jour du score\n        setCompletedWords([...completedWords, [word1, word2]]);\n        setScore(score + 1);\n      }\n    }\n    setCouplechoisi(nouveauCouplechoisi);\n  }\n\n  // restart game\n  function restartGame() {\n    //\n    setClicks(0);\n    setCouplechoisi([]);\n    setCompletedWords([]);\n    setRandomWords(generateRandomWords);\n  }\n\n  useEffect(() => {\n    // effet de bord\n    if (couplechoisi.length === 2) {\n      setTimeout(() => setCouplechoisi([]), 1000);\n    }\n  }, [couplechoisi]);\n\n  return {\n    randomWords,\n    choisirMot,\n    couplechoisi,\n    score,\n    clicks,\n    completedWords,\n    restartGame\n  };\n}\n\nexport default function Board() {\n  const {\n    randomWords,\n    choisirMot,\n    couplechoisi,\n    score,\n    clicks,\n    completedWords,\n    restartGame\n  } = useMemoryBoardGame();\n  const Result = () => {\n    return (\n    <div style={{backgroundColor:\"#424C55\",maxHeight:\"10vh\",padding:\"10px\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\",borderRadius:15}}>\n      <p style={{margin:0}}>Score : {score}</p>\n    </div>);\n  };\n  return (\n    <div className=\"memory-game\" style={{display:'flex',alignContent:\"center\",justifyContent:\"center\",height:'100%',width:\"100%\"}}>\n      <div className=\"memory-game\" style={{display:'flex',alignContent:\"center\",justifyContent:\"center\",height:'100%',width:\"100%\"}}>\n        {range(0, LinesCount).map(line => (\n          <div key={String(line)} className=\"border-row\">\n            {range(0, ColumnsCount).map(column => {\n              const index = line * ColumnsCount + column;\n              const text = randomWords[index];\n              const isDisplayed =\n                couplechoisi.includes(text) ||\n                completedWords.some(couple => couple.includes(text));\n              return (\n                <Cell\n                  className=\"memory-card\"\n                  key={String(index)}\n                  valeur={text}\n                  isDisplayed={isDisplayed}\n                  onSelected={() => choisirMot(text)}\n                />\n              );\n            })}\n          </div>\n        ))}\n        <Result />\n      </div>\n      \n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Board from \"../components/Board\";\n\nexport default class Game extends Component {\n  render() {\n    return <Board className=\"memory-game\"></Board>;\n  }\n}\n","import React from \"react\";\nimport \"../App.css\";\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\" style={{height:\"40%\"}}>\n  <a className=\"navbar-brand\" href=\"#\">Englitch</a>\n  <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n    \n  </div>\n</nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport Game from \"./components/Game\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./components/Navbar\";\nconst App = () => (\n  <div className=\"App\">\n    <NavBar>\n    </NavBar>\n    \n    <Game id=\"game\" className=\"memory-game\" style={{position: \"absolute\"}} />\n    \n    \n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}